package Client;

import static common.ServerMessaging.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.net.URL;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author John
 * 
 * Jeremy Pallwitz EDIT: 5.6.2018 Added config method to set IP address from
 * config.properties file.
 */
public class MasterController extends javax.swing.JFrame {
    private Socket sock; //The socket that connects to the Server
    private Properties fields;
    /**
     * Creates new form MasterFrame
     * @param sock
     */
    public MasterController() {
        initComponents();
        fields = config();
        if(fields.isEmpty())
            connect("localhost");
        else
            connect(fields.getProperty("IP_ADDRESS"));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setMinimumSize(new java.awt.Dimension(640, 480));
        setPreferredSize(new java.awt.Dimension(700, 500));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    // End of variables declaration                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MasterController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MasterController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MasterController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MasterController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MasterController().setVisible(true);
            }
        });
    }

    /**
     * Attempts to connect to the server
     * @param ip
     */
    public void connect(String ip)
    {
        try {
            sock = new Socket(ip, SERVER_PORT);
        } catch (IOException e) {
        }
        if (sock == null)
            setupOffline();
        else
            setUpAuth();
    }

    public void setUpAuth() {
        //kill other views...
        AuthController authControl = new AuthController(this, sock);
        this.setContentPane(authControl.authView);
        this.setTitle("Authentication");
        pack();
    }

    /**
     * Sets up the view for offline
     */
    public void setupOffline()
    {
        OfflineController offControl = new OfflineController(this);
        offControl.takeover(this);
    }
    

    /**
     * Sets up the lobby view
     * @param username the username of the account logged into
     * @param players the list of players in the lobby
     */
    public void setUpLobby(String username) {
        //kill other views...
        LobbyController lobbyControl = new LobbyController(this,sock);
        this.setTitle(username);
        
    }

    public Properties config() {
        Properties prop = new Properties();
        InputStream input = null;
        try{
            input = new FileInputStream("src/Client/config.properties");
            
            prop.load(input);
            
            
        } catch (FileNotFoundException ex) {
           System.out.println("File not found");
        } catch (IOException ex) {
           System.out.println("Failed to read file.");
        }
        return prop;
        
    }
}
